package automatedsequence.gui;

import automatedsequence.MP3Player;
import automatedsequence.RandomizeOCanada;
import automatedsequence.Timer;
import automatedsequence.dateandtime.SuperCalendar;
import automatedsequence.fileInput.Line;
import automatedsequence.fileInput.ReadOCanadaFile;
import automatedsequence.fileInput.ReadScheduleFile;
import automatedsequence.fileOutput.WriteToScheduleFile;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.AbstractListModel;
import javax.swing.ListSelectionModel;

/**
 * Purpose: Main Program Class
 *
 * @author Brian Ho, Max Romanoff, Conor Norman 
 * June 5 2014
 */
public class MainProgram extends javax.swing.JFrame {

    private MP3Player player = new MP3Player();
    private ReadScheduleFile scheduleFile = new ReadScheduleFile(); // run the constructor
    private ReadOCanadaFile oCanadaFile = new ReadOCanadaFile(); // run the constructor
    private RandomizeOCanada oCanada = new RandomizeOCanada();
    private String time, information; // storing time and ocanada info
    private SuperCalendar calendar = new SuperCalendar();
    private boolean isForcedStartActive = false; // is any events forced to play
    private String dayOfWeek, month;
    private int dayOfMonth, year, hour, minute, sec;

    private AbstractListModel tableModel;
    private String[] fileInformation;

    /**
     * Creates new form MainProgram
     */
    public MainProgram() {
        populateScheduledBox(false);
        initComponents(); // initializes all the components in the gui
    }

    /**
     * Method gets the instance of the mp3 player
     *
     * @return instance of mp3 player
     */
    public MP3Player getMP3PlayerInstance() {
        return player;
    }

    /**
     * Method updates the scheduled box
     *
     * @param refresh true if updating
     */
    public void populateScheduledBox(boolean refresh) {
        fileInformation = new String[ReadScheduleFile.getScheduledEventData().size()]; // match size of arralist
        for (Line genericEventData : ReadScheduleFile.getScheduledEventData()) { // loop through all indexes
            fileInformation[genericEventData.getEventID()] = "[" + Line.getFormattedTime(ReadScheduleFile.getScheduledEventData().get(genericEventData.getEventID()).getStartTime()) + " - " + Line.getFormattedTime(ReadScheduleFile.getScheduledEventData().get(genericEventData.getEventID()).getEndTime()) + "] " + ReadScheduleFile.getScheduledEventData().get(genericEventData.getEventID()).getName(); // format and populate
        }
        tableModel = new AbstractListModel() {

            public int getSize() {
                return fileInformation.length;
            }

            public Object getElementAt(int i) {
                return fileInformation[i];
            }
        };
        if (refresh) { // only true when updating
            scheduledTasks.setModel(tableModel); // set model
            scheduledTasks.revalidate(); // revalidate
            scheduledTasks.repaint(); // refreshes
        }
    }
    
    /**
     * Method returns if the program is supposed to be halted or not
     * 
     * @return if the program is currently halted or not
     */
    public boolean isStopped() {
        return stopToggleButton.isSelected();
    }
    
    /**
     * Method returns if there is a manual event executing
     *
     * @param isForcedStart is there a manual event executing
     */
    public void setForcedStartActive(boolean isForcedStart) {
        isForcedStartActive = isForcedStart;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoPane = new javax.swing.JScrollPane();
        informationBox = new javax.swing.JTextArea();
        infoLabel = new javax.swing.JLabel();
        scheduledTasksLabel = new javax.swing.JLabel();
        dateAndTimeLabel = new javax.swing.JLabel();
        propertiesButton = new javax.swing.JButton();
        postponeToggleButton = new javax.swing.JToggleButton();
        minutesLabel = new javax.swing.JLabel();
        scheduledTasksPane = new javax.swing.JScrollPane();
        scheduledTasks = new javax.swing.JList();
        logo = new javax.swing.JLabel();
        postponeDurationInMinutesSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        scheduleTasksPanel = new javax.swing.JPanel();
        scheduleHolidaysButton = new javax.swing.JButton();
        scheduleCommandButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        stopToggleButton = new javax.swing.JToggleButton();
        modifyTasksButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        startNowButton = new javax.swing.JButton();
        byLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Super Automator (Brian Ho, Maxim Romanoff, Conor Norman)");
        setMaximumSize(new java.awt.Dimension(800, 390));
        setMinimumSize(new java.awt.Dimension(800, 390));
        setResizable(false);

        informationBox.setColumns(1);
        informationBox.setRows(1);
        informationBox.setEditable(false); // cannot edit text being displayed
        informationBox.setText(information);
        informationBox.setToolTipText("This box displays the current task playing and the O'Canada version chosen when it is playing.");
        infoPane.setViewportView(informationBox);

        infoLabel.setText("Info");

        scheduledTasksLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        scheduledTasksLabel.setText("SCHEDULED TASKS");

        dateAndTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        dateAndTimeLabel.setText(time);

        propertiesButton.setText("Manage O'Canada Versions");
        propertiesButton.setToolTipText("Pressing this allows you to manage the O'Canada versions (Add or Remove)");
        propertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertiesButtonActionPerformed(evt);
            }
        });

        postponeToggleButton.setText("POSTPONE ALL TASKS");
        postponeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postponeToggleButtonActionPerformed(evt);
            }
        });

        minutesLabel.setText("Minutes");

        scheduledTasks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        scheduledTasks.setModel(tableModel);
        scheduledTasks.setToolTipText("Here you can see all the tasks that are scheduled to run. You may modify them using the task control panel below.");
        scheduledTasksPane.setViewportView(scheduledTasks);

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/pic.png"))); // NOI18N

        postponeDurationInMinutesSpinner.setValue((int) -1); // set default value to -1
        postponeDurationInMinutesSpinner.setToolTipText("You may enter negative values here if you wish to make the tasks run earlier.");
        postponeDurationInMinutesSpinner.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        postponeDurationInMinutesSpinner.setMaximumSize(new java.awt.Dimension(29, 20));

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel1.setText("Super Automator v1.3");

        scheduleTasksPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Schedule Tasks"));

        scheduleHolidaysButton.setText("Schedule Holiday");
        scheduleHolidaysButton.setToolTipText("This allows you to schedule a holiday for when you do not wish for ANY events to be played. This temporarily stops the program for the whole day and will resume automatically for the next. Scheduled holidays also appear in the task window above.");
        scheduleHolidaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleHolidaysButtonActionPerformed(evt);
            }
        });

        scheduleCommandButton.setText("Schedule Task");
        scheduleCommandButton.setToolTipText("This allows you to schedule new tasks for the program to execute. Once scheduled, tasks will appear in the window above.");
        scheduleCommandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleCommandButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scheduleTasksPanelLayout = new javax.swing.GroupLayout(scheduleTasksPanel);
        scheduleTasksPanel.setLayout(scheduleTasksPanelLayout);
        scheduleTasksPanelLayout.setHorizontalGroup(
            scheduleTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleTasksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scheduleTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scheduleHolidaysButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scheduleCommandButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        scheduleTasksPanelLayout.setVerticalGroup(
            scheduleTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleTasksPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scheduleCommandButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scheduleHolidaysButton))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Task Control Panel"));

        stopToggleButton.setText("STOP ALL TASKS");
        stopToggleButton.setToolTipText("Pressing this halts the whole program, no tasks will be executed until it is clicked again! (Must be resumed before a task is scheduled to start, or the task will not execute!)");
        stopToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopToggleButtonActionPerformed(evt);
            }
        });

        modifyTasksButton.setText("MODIFY");
        modifyTasksButton.setToolTipText("This allows you to modify the tasks already created. First highlight a task above, then click this button.");
        modifyTasksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyTasksButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("DELETE");
        deleteButton.setToolTipText("Highlighting a task and selecting this permanantly deletes the task. With the exception of the first three tasks; everything can be deleted.");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        startNowButton.setText("START NOW");
        startNowButton.setToolTipText("This button overides the time for ONE task only! Highlight a task above and click this to start the event instantly! (This must be done multiple times if you wish to manually start multiple events!)");
        startNowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startNowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(modifyTasksButton, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stopToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(startNowButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(7, 7, 7))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startNowButton)
                    .addComponent(modifyTasksButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopToggleButton)
                    .addComponent(deleteButton)))
        );

        byLabel.setText("By");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scheduledTasksLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(postponeToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(byLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(postponeDurationInMinutesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minutesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scheduleTasksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(scheduledTasksPane))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(propertiesButton)
                                    .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(logo))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(infoPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dateAndTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(scheduledTasksLabel)
                            .addComponent(postponeToggleButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(byLabel)
                        .addComponent(postponeDurationInMinutesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(minutesLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scheduledTasksPane, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logo))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(scheduleTasksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(infoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(infoPane)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(propertiesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateAndTimeLabel)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1))
        );

        new Thread(){
            public void run(){
                while (true){
                    Calendar c = new GregorianCalendar();
                    dayOfWeek = (calendar.getDayOfWeek(c.get(Calendar.DAY_OF_WEEK)));
                    month = (calendar.getMonth(c.get(Calendar.MONTH) + 1)); // because starts at 0
                    dayOfMonth = c.get(Calendar.DAY_OF_MONTH);
                    year = c.get(Calendar.YEAR);
                    hour = c.get(Calendar.HOUR_OF_DAY);
                    minute = c.get(Calendar.MINUTE);
                    sec = c.get(Calendar.SECOND);
                    time = dayOfWeek + " " + month + " " + dayOfMonth + " " + year + " [EST " + (hour > 12 ? hour-12 : (hour == 0 ? 12 : hour)) +":" + ((minute < 10) ? "0" + minute : minute) + ":" + ((sec < 10) ? "0" + sec : sec) + (hour > 12 ? " PM]" : " AM]"); // format and print time
                    dateAndTimeLabel.setText(time); // updates the time every second
                    information = "[INFO] O'CANADA VERSION " + Timer.getOCanadaVersion() +" SELECTED"; // shows the version of O'Canada selected, updates every second
                    informationBox.setText((!Timer.isOCanadaPlaying() ? "[INFO] Waiting to start O'Canada..." : information) + "\n" + (Timer.getIsPlaying() ? "[INFO] Currently Executing Task: " + Timer.getCurrentTaskName() : "")); // if O canada is not detected to be playing; display this, if there is an event playing display name, otherwise leave blank

                    try {
                        Thread.sleep(1000); // loop once every second, reduces toll on cpu
                    } catch (InterruptedException ex) {
                        System.out.println(ex);
                    }
                }
            }
        }.start();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method stops the music when the override button is toggled true
     *
     * @param evt
     */
    private void stopToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopToggleButtonActionPerformed
        if (stopToggleButton.isSelected()) {
            stopToggleButton.setText("RESUME ALL TASKS");
        } else { // reset text
            stopToggleButton.setText("STOP ALL TASKS");
        }
        player.stop(); // stops the music from playing
        isForcedStartActive = false; // no songs being manually played
        Timer.setIsOCanadaPlaying(false); // incase user stops ocanada
        Timer.isManuallyStopped(true); // resets the time if user stops a manual event
    }//GEN-LAST:event_stopToggleButtonActionPerformed

    /**
     * Method creates a commandsGUI object and launches a new window
     *
     * @param evt
     */
    private void scheduleCommandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleCommandButtonActionPerformed
        if (!isForcedStartActive) { // if there is no manual event executing
            if (!postponeToggleButton.isSelected()) { // if postpone button is not selected
                CommandScheduler commandsGUI = new CommandScheduler(); // command gui object
                commandsGUI.setLocationRelativeTo(null); // centers window
                commandsGUI.setVisible(true); // make visible
            } else { // is postponed
                Error errorPopup = new Error("Please de-select the postpone button!"); // passes string
                errorPopup.setLocationRelativeTo(null); // centers window
                errorPopup.setVisible(true); // make visible
            }
        } else { // manual event is active
            Error errorPopup = new Error("Please stop the manual event first!"); // passes string
            errorPopup.setLocationRelativeTo(null); // centers window
            errorPopup.setVisible(true); // make visible
        }
    }//GEN-LAST:event_scheduleCommandButtonActionPerformed

    /**
     * Method postpones the events by the duration that the user enters and when
     * button is released, value resets to normal
     *
     * @param evt
     */
    private void postponeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postponeToggleButtonActionPerformed
        if (!isForcedStartActive) { // if there is no manual event executing
            for (Line genericEventData : ReadScheduleFile.getScheduledEventData()) { // loop through all indexes
                if (postponeToggleButton.isSelected()) {
                    postponeToggleButton.setText("UN-POSTPONE ALL TASKS");
                    if (!genericEventData.getPath().equalsIgnoreCase("NOPATH")) { // if it is not a holiday
                        genericEventData.postponeStartTime((int) postponeDurationInMinutesSpinner.getValue());
                        genericEventData.postponeEndTime((int) postponeDurationInMinutesSpinner.getValue());
                    }
                    postponeDurationInMinutesSpinner.setEnabled(false); // avoid potential bug, does not let user change value after button is pressed
                    populateScheduledBox(true); // refreshes info box
                } else {
                    postponeToggleButton.setText("POSTPONE ALL TASKS");
                    if (!genericEventData.getPath().equalsIgnoreCase("NOPATH")) { // if it is not a holiday
                        genericEventData.postponeStartTime(-(int) postponeDurationInMinutesSpinner.getValue());
                        genericEventData.postponeEndTime(-(int) postponeDurationInMinutesSpinner.getValue());
                    }
                    postponeDurationInMinutesSpinner.setEnabled(true);
                    populateScheduledBox(true); // refreshes info box
                }
            }
        } else { // manual event is active
            Error errorPopup = new Error("Please stop the manual event first!"); // passes string
            errorPopup.setLocationRelativeTo(null); // centers window
            errorPopup.setVisible(true); // make visible
        }
    }//GEN-LAST:event_postponeToggleButtonActionPerformed

    /**
     * Method creates a propertiesGUI object and launches a new window
     *
     * @param evt
     */
    private void propertiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertiesButtonActionPerformed
        if (!isForcedStartActive) { // if there is no manual event executing
            if (!postponeToggleButton.isSelected()) { // if postpone button is not selected
                OCanadaVersionProperties propertiesGUI = new OCanadaVersionProperties();                 propertiesGUI.setLocationRelativeTo(null); // centers window
                propertiesGUI.setVisible(true); // make visible
            } else { // is postponed
                Error errorPopup = new Error("Please de-select the postpone button!"); // passes string
                errorPopup.setLocationRelativeTo(null); // centers window
                errorPopup.setVisible(true); // make visible
            }
        } else { // manual event is active
            Error errorPopup = new Error("Please stop the manual event first!"); // passes string
            errorPopup.setLocationRelativeTo(null); // centers window
            errorPopup.setVisible(true); // make visible
        }
    }//GEN-LAST:event_propertiesButtonActionPerformed

    /**
     * Method plays selected file in "SCHEDULED TASKS" box when clicked
     *
     * @param evt
     */
    private void startNowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startNowButtonActionPerformed
        if (!stopToggleButton.isSelected()) { // if the override button is not selected
            if (scheduledTasks.getSelectedIndex() >= 0 && scheduledTasks.getSelectedIndex() < ReadScheduleFile.getScheduledEventData().size()) {
                if (!isForcedStartActive && !Timer.getIsPlaying()) { // if nothing is playing
                    isForcedStartActive = true;
                    int durationOfEvent = ReadScheduleFile.getScheduledEventData().get(scheduledTasks.getSelectedIndex()).getDuration(); // get duration of event
                    int currentTimeInSeconds = Timer.getCurrentTimeInSeconds(); // get current time in seconds
                    int initialStartTime = ReadScheduleFile.getScheduledEventData().get(scheduledTasks.getSelectedIndex()).getStartTime(); // save the original start time to memory
                    int initialEndTime = ReadScheduleFile.getScheduledEventData().get(scheduledTasks.getSelectedIndex()).getEndTime(); // save the original end time to memory
                    String initialExecutionDate = ReadScheduleFile.getScheduledEventData().get(scheduledTasks.getSelectedIndex()).getDate(); // save the original execution date to memory
                    
                    ReadScheduleFile.getScheduledEventData().get(scheduledTasks.getSelectedIndex()).setStartTime(currentTimeInSeconds + 1); // set time to now (1 sec delay incase of latency)
                    ReadScheduleFile.getScheduledEventData().get(scheduledTasks.getSelectedIndex()).setEndTime(currentTimeInSeconds + durationOfEvent + 1); // set end time (1 sec delay incase of latency)
                    ReadScheduleFile.getScheduledEventData().get(scheduledTasks.getSelectedIndex()).setDate(Timer.getCurrentDate());

                    Timer.isManuallyStarted(true, scheduledTasks.getSelectedIndex(), initialStartTime, initialEndTime, initialExecutionDate); // passes information to timer to know it is a forced start
                    populateScheduledBox(true); // resets the box
                } else {
                    Error errorPopup = new Error("An event is currently playing!"); // passes string
                    errorPopup.setLocationRelativeTo(null); // centers window
                    errorPopup.setVisible(true); // make visible
                }
            } else { // no selection
                Error errorPopup = new Error("Please select an item in Scheduled Tasks!"); // passes string
                errorPopup.setLocationRelativeTo(null); // centers window
                errorPopup.setVisible(true); // make visible
            }
        } else { // schedule stopped
            Error errorPopup = new Error("Please de-select the stop button!"); // passes string
            errorPopup.setLocationRelativeTo(null); // centers window
            errorPopup.setVisible(true); // make visible
        }
    }//GEN-LAST:event_startNowButtonActionPerformed

    /**
     * Method creates a holidaysGUI object and launches a new window
     *
     * @param evt
     */
    private void scheduleHolidaysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleHolidaysButtonActionPerformed
        if (!isForcedStartActive) { // if there is no manual event executing
            if (!postponeToggleButton.isSelected()) { // if postpone button is not selected
                HolidayScheduler holidaysGUI = new HolidayScheduler(); // holiday gui object
                holidaysGUI.setLocationRelativeTo(null); // centers window
                holidaysGUI.setVisible(true); // make visible
            } else { // is postponed
                Error errorPopup = new Error("Please de-select the postpone button!"); // passes string
                errorPopup.setLocationRelativeTo(null); // centers window
                errorPopup.setVisible(true); // make visible
            }
        } else { // manual event is active
            Error errorPopup = new Error("Please stop the manual event first!"); // passes string
            errorPopup.setLocationRelativeTo(null); // centers window
            errorPopup.setVisible(true); // make visible
        }
    }//GEN-LAST:event_scheduleHolidaysButtonActionPerformed

    /**
     * Action performed method for delete button
     *
     * @param evt
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (!isForcedStartActive) { // if there is no manual event executing
            if (!postponeToggleButton.isSelected()) { // if postpone button is not selected
                if (scheduledTasks.getSelectedIndex() >= 3 && scheduledTasks.getSelectedIndex() < ReadScheduleFile.getScheduledEventData().size()) { // if there is a selection
                    ReadScheduleFile.getScheduledEventData().remove(scheduledTasks.getSelectedIndex());
                    WriteToScheduleFile.reorderAndWrite();
                    populateScheduledBox(true); // update scheduled box
                } else if (scheduledTasks.getSelectedIndex() >= 0 && scheduledTasks.getSelectedIndex() <= 2) { // if morning rush, standup, or oCanada
                    Error errorPopup = new Error("You cannot delete this task, you can only modify it!"); // passes string
                    errorPopup.setLocationRelativeTo(null); // centers window
                    errorPopup.setVisible(true); // make visible
                } else { // no selection
                    Error errorPopup = new Error("Please select an item in Scheduled Tasks!"); // passes string
                    errorPopup.setLocationRelativeTo(null); // centers window
                    errorPopup.setVisible(true); // make visible
                }
            } else { // is postponed
                Error errorPopup = new Error("Please un-postpone all tasks first! (click button close to top)"); // passes string
                errorPopup.setLocationRelativeTo(null); // centers window
                errorPopup.setVisible(true); // make visible
            }
        } else { // manual event is active
            Error errorPopup = new Error("Please stop the manual event first!"); // passes string
            errorPopup.setLocationRelativeTo(null); // centers window
            errorPopup.setVisible(true); // make visible
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Action performed method for modify button
     *
     * @param evt
     */
    private void modifyTasksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyTasksButtonActionPerformed
        if (!isForcedStartActive) { // if there is no manual event executing
            if (!postponeToggleButton.isSelected()) { // if postpone button is not selected
                if (scheduledTasks.getSelectedIndex() >= 0) { // if there is a selection
                    ModifyTask modifyGUI = new ModifyTask(scheduledTasks.getSelectedIndex()); // modify task gui object
                    modifyGUI.setLocationRelativeTo(null); // centers window
                    modifyGUI.setVisible(true); // make visible
                } else { // no selection
                    Error errorPopup = new Error("Please select an item in Scheduled Tasks!"); // passes string
                    errorPopup.setLocationRelativeTo(null); // centers window
                    errorPopup.setVisible(true); // make visible
                }
            } else { // is postponed
                Error errorPopup = new Error("Please de-select the postpone button!"); // passes string
                errorPopup.setLocationRelativeTo(null); // centers window
                errorPopup.setVisible(true); // make visible
            }
        } else { // manual event is active
            Error errorPopup = new Error("Please stop the manual event first!"); // passes string
            errorPopup.setLocationRelativeTo(null); // centers window
            errorPopup.setVisible(true); // make visible
        }
    }//GEN-LAST:event_modifyTasksButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel byLabel;
    private javax.swing.JLabel dateAndTimeLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JScrollPane infoPane;
    private javax.swing.JTextArea informationBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel minutesLabel;
    private javax.swing.JButton modifyTasksButton;
    private javax.swing.JSpinner postponeDurationInMinutesSpinner;
    private javax.swing.JToggleButton postponeToggleButton;
    private javax.swing.JButton propertiesButton;
    private javax.swing.JButton scheduleCommandButton;
    private javax.swing.JButton scheduleHolidaysButton;
    private javax.swing.JPanel scheduleTasksPanel;
    private javax.swing.JList scheduledTasks;
    private javax.swing.JLabel scheduledTasksLabel;
    private javax.swing.JScrollPane scheduledTasksPane;
    private javax.swing.JButton startNowButton;
    private javax.swing.JToggleButton stopToggleButton;
    // End of variables declaration//GEN-END:variables
}
