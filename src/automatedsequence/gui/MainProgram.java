package automatedsequence.gui;

import automatedsequence.MP3Player;
import automatedsequence.RandomizeOCanada;
import automatedsequence.constants.PathConstants;
import automatedsequence.dateAndTime.SuperCalendar;
import automatedsequence.fileInput.Line;
import automatedsequence.fileInput.ReadFile;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.AbstractListModel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Brian Ho
 */
public class MainProgram extends javax.swing.JFrame {

    private MP3Player player = new MP3Player();
    private ReadFile file = new ReadFile(); // run the constructor
    private RandomizeOCanada oCanada = new RandomizeOCanada();
    private String time;
    private SuperCalendar calendar = new SuperCalendar();
    
    private AbstractListModel tableModel, completedModel;
    private static String[] fileInformation;

    public MainProgram() {
        populateScheduledBox(false);
        initComponents(); // initializes all the components in the gui
    }

    private void populateCompletedBox() {

    }

    public void populateScheduledBox(boolean refresh) {
        fileInformation = new String[ReadFile.getGenericEventData().size()];
        for (Line genericEventData : ReadFile.getGenericEventData()) {
            fileInformation[genericEventData.getEventID()] = "[" + Line.getFormattedTime(ReadFile.getGenericEventData().get(genericEventData.getEventID()).getStartTime()) + " - " + Line.getFormattedTime(ReadFile.getGenericEventData().get(genericEventData.getEventID()).getEndTime()) + "] " + ReadFile.getGenericEventData().get(genericEventData.getEventID()).getName();
        }
        tableModel = new AbstractListModel() {
            @Override
            public int getSize() {
                return fileInformation.length;
            }

            @Override
            public Object getElementAt(int i) {
                return fileInformation[i];
            }
        };
        if (refresh) {
            scheduledTasks.repaint(); // refreshes
        }
    }

    public void checkFinishedMusic() {
        if (!AuthenticationDialogue.getTimerInstance().getState()) {
            //scheduledTasks1.ad
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scheduleCommandButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateAndTimeLabel = new javax.swing.JLabel();
        overrideToggleButton = new javax.swing.JToggleButton();
        propertiesButton = new javax.swing.JButton();
        postponeToggleButton = new javax.swing.JToggleButton();
        postponeDurationInMinutes = new javax.swing.JTextField();
        minutesLabel = new javax.swing.JLabel();
        scheduleHolidaysButton = new javax.swing.JButton();
        startNowButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        scheduledTasks = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        scheduledTasks1 = new javax.swing.JList();
        deleteButton = new javax.swing.JButton();
        modifyTasksButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Super Automator");
        setResizable(false);

        scheduleCommandButton.setText("Schedule Command");
        scheduleCommandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleCommandButtonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(1);
        jTextArea1.setRows(1);
        jTextArea1.setEditable(false); // cannot edit text being displayed
        jTextArea1.setText("[INFO] O'CANADA VERSION " + oCanada.getVersion() +" SELECTED");
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Logger");

        jLabel2.setText("SCHEDULED TASKS");

        jLabel3.setText("COMPLETED");

        dateAndTimeLabel.setText(time);

        overrideToggleButton.setText("Override");
        overrideToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overrideToggleButtonActionPerformed(evt);
            }
        });

        propertiesButton.setText("Properties");
        propertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertiesButtonActionPerformed(evt);
            }
        });

        postponeToggleButton.setText("Postpone");
        postponeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postponeToggleButtonActionPerformed(evt);
            }
        });

        postponeDurationInMinutes.setText("5");

        minutesLabel.setText("Minutes");

        scheduleHolidaysButton.setText("Schedule Holidays");
        scheduleHolidaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleHolidaysButtonActionPerformed(evt);
            }
        });

        startNowButton.setText("START NOW");
        startNowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startNowButtonActionPerformed(evt);
            }
        });

        scheduledTasks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        scheduledTasks.setModel(tableModel);
        jScrollPane4.setViewportView(scheduledTasks);

        scheduledTasks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        scheduledTasks1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {"["  + ReadFile.getGenericEventData().get(0).getStartTime()  + " - 8:21:30 AM] " + ReadFile.getGenericEventData().get(0).getName(), "ajshdjan"};
            //String[] strings = MainProgram.strings.clone();
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(scheduledTasks1);

        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        modifyTasksButton.setText("MODIFY");
        modifyTasksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyTasksButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(dateAndTimeLabel))
                            .addComponent(scheduleHolidaysButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scheduleCommandButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(propertiesButton)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(modifyTasksButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(overrideToggleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(postponeToggleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(postponeDurationInMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minutesLabel)
                                .addGap(18, 18, 18)
                                .addComponent(startNowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(overrideToggleButton)
                            .addComponent(postponeToggleButton)
                            .addComponent(postponeDurationInMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minutesLabel)
                            .addComponent(startNowButton))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(scheduleCommandButton)
                            .addComponent(propertiesButton)
                            .addComponent(modifyTasksButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(scheduleHolidaysButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateAndTimeLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
        );

        new Thread(){
            public void run(){
                while (true){
                    Calendar c= new GregorianCalendar();
                    String dayOfWeek = (calendar.getDayOfWeek(c.get(Calendar.DAY_OF_WEEK)));
                    String month = (calendar.getMonth(c.get(Calendar.MONTH) + 1)); // because starts at 0
                    int dayOfMonth = c.get(Calendar.DAY_OF_MONTH);
                    int year = c.get(Calendar.YEAR);
                    int hour = c.get(Calendar.HOUR_OF_DAY);
                    int minute = c.get(Calendar.MINUTE);
                    int sec = c.get(Calendar.SECOND);
                    time = dayOfWeek + " " + month + " " + dayOfMonth + " " + year + " [EDT " + hour +":" + ((minute < 10) ? "0" + minute : minute) + ":" + ((sec < 10) ? "0" + sec : sec) + "]";
                    dateAndTimeLabel.setText(time);

                    try {
                        Thread.sleep(1000); // loop once every second, reduces toll on cpu
                    } catch (InterruptedException ex) {
                        System.out.println(ex);
                    }
                }
            }
        }.start();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method stops the music when the override button is toggled true
     *
     * @param evt
     */
    private void overrideToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overrideToggleButtonActionPerformed
        player.Stop(); // stops the music from playing
    }//GEN-LAST:event_overrideToggleButtonActionPerformed

    /**
     * Method creates a commandsGUI object and launches a new window
     *
     * @param evt
     */
    private void scheduleCommandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleCommandButtonActionPerformed
        if (!postponeToggleButton.isSelected()) {
            CommandScheduler commandsGUI = new CommandScheduler(); // command gui object
            commandsGUI.setLocationRelativeTo(null); // centers window
            commandsGUI.setVisible(true); // make visible
        }
    }//GEN-LAST:event_scheduleCommandButtonActionPerformed

    /**
     * Method postpones the events by the duration that the user enters and when
     * button is released, value resets to normal
     *
     * @param evt
     */
    private void postponeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postponeToggleButtonActionPerformed
        for (Line genericEventData : ReadFile.getGenericEventData()) {
            if (postponeToggleButton.isSelected()) {
                if (!genericEventData.getPath().equalsIgnoreCase("NOPATH")) {
                    genericEventData.postponeStartTime(Integer.parseInt(postponeDurationInMinutes.getText()));
                    genericEventData.postponeEndTime(Integer.parseInt(postponeDurationInMinutes.getText()));
                }
                postponeDurationInMinutes.setEditable(false); // avoid potential bug, does not let user change value after button is pressed
                populateScheduledBox(true); // refreshes info box
            } else {
                if (!genericEventData.getPath().equalsIgnoreCase("NOPATH")) {
                    genericEventData.postponeStartTime(-Integer.parseInt(postponeDurationInMinutes.getText()));
                    genericEventData.postponeEndTime(-Integer.parseInt(postponeDurationInMinutes.getText()));
                }
                postponeDurationInMinutes.setEditable(true);
                populateScheduledBox(true); // refreshes info box
            }
        }
    }//GEN-LAST:event_postponeToggleButtonActionPerformed

    /**
     * Method creates a propertiesGUI object and launches a new window
     *
     * @param evt
     */
    private void propertiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertiesButtonActionPerformed
        if (!postponeToggleButton.isSelected()) {
            Properties propertiesGUI = new Properties(); // properties gui object
            propertiesGUI.setLocationRelativeTo(null); // centers window
            propertiesGUI.setVisible(true); // make visible
        }
    }//GEN-LAST:event_propertiesButtonActionPerformed

    /**
     * Method plays selected file in "SCHEDULED TASKS" box when clicked
     *
     * @param evt
     */
    private void startNowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startNowButtonActionPerformed
        if (!overrideToggleButton.isSelected()) { // if the override button is not selected
            if (scheduledTasks.getSelectedIndex() >= 0 && scheduledTasks.getSelectedIndex() < ReadFile.getGenericEventData().size()) {
                player.Play(ReadFile.getGenericEventData().get(scheduledTasks.getSelectedIndex()).getPath());
            }
        }
    }//GEN-LAST:event_startNowButtonActionPerformed

    /**
     * Method creates a holidaysGUI object and launches a new window
     *
     * @param evt
     */
    private void scheduleHolidaysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleHolidaysButtonActionPerformed
        if (!postponeToggleButton.isSelected()) {
            HolidayScheduler holidaysGUI = new HolidayScheduler(); // holiday gui object
            holidaysGUI.setLocationRelativeTo(null); // centers window
            holidaysGUI.setVisible(true); // make visible
        }
    }//GEN-LAST:event_scheduleHolidaysButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (!overrideToggleButton.isSelected()) { // if the override button is not selected
            if (scheduledTasks.getSelectedIndex() >= 0 && scheduledTasks.getSelectedIndex() < ReadFile.getGenericEventData().size()) {
                ReadFile.getGenericEventData().remove(scheduledTasks.getSelectedIndex());
                int counter = 0;
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(PathConstants.schedulePathFile))) {
                    for (Line genericEventData : ReadFile.getGenericEventData()) {
                        genericEventData.setEventID(counter);
                        bw.write(genericEventData.getEventID() + " @ " + genericEventData.getName() + " @ " + genericEventData.getPath() + " @ " + genericEventData.getStartTime() + " @ " + genericEventData.getEndTime() + " @ " + genericEventData.getDate() + " @ ");
                        counter++;
                        bw.newLine();
                    }
                    bw.flush();
                    bw.close();
                } catch (IOException e) {
                    System.out.println("IO Exception");
                }
                populateScheduledBox(true);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void modifyTasksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyTasksButtonActionPerformed
        if (!postponeToggleButton.isSelected()) {
            if (scheduledTasks.getSelectedIndex() >= 0) {
                ModifyTask modifyGUI = new ModifyTask(scheduledTasks.getSelectedIndex()); // modify task gui object
                modifyGUI.setLocationRelativeTo(null); // centers window
                modifyGUI.setVisible(true); // make visible
            }
        }
    }//GEN-LAST:event_modifyTasksButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dateAndTimeLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel minutesLabel;
    private javax.swing.JButton modifyTasksButton;
    private javax.swing.JToggleButton overrideToggleButton;
    private javax.swing.JTextField postponeDurationInMinutes;
    private javax.swing.JToggleButton postponeToggleButton;
    private javax.swing.JButton propertiesButton;
    private javax.swing.JButton scheduleCommandButton;
    private javax.swing.JButton scheduleHolidaysButton;
    private javax.swing.JList scheduledTasks;
    private javax.swing.JList scheduledTasks1;
    private javax.swing.JButton startNowButton;
    // End of variables declaration//GEN-END:variables
}
